library(tidyverse)
library(Amelia)
library(caret)
library(MASS) #For boxcox transformations
library(corrplot)
library(psych)
library(corrgram)
library(mlbench)
library(e1071) # For finding skewness
library(car) #For symbox func

crimeTrain <- read.csv("crimeTrain.csv")
crimeTest <- read.csv("crimeTest.csv")
View(crimeTest)

cTest <- read.csv("crimeTest.csv")

crimeTest$ViolentCrimesPerPop <- NA
crimeTest$Id <- NULL

crimeTrain <- rbind(crimeTrain,crimeTest)

Train <- crimeTrain
View(crimeTrain)

myfun<-function(x) mean(is.na(x))
apply(crimeTrain,2,myfun) #Getting percentage of missing values in each variable

getmode <- function(v) {
  uniqv <- unique(v)
  uniqv[which.max(tabulate(match(v, uniqv)))]
}


plot(Train$FTPoliceFieldPerPop, Train$ViolentCrimesPerPop) 
plot(Train$county, Train$ViolentCrimesPerPop) #Target variable doesn't seem to be affected by county
str(Train$county) 
unique(Train$communityname) #has 1135 unique values. So, can be removed.
unique(Train$county) 


crimeTrain$county <- NULL

crimeTrain <- crimeTrain[,c(1:99)]

crimeTrain$LandArea <- Train$LandArea
crimeTrain$PopDens <- Train$PopDens
crimeTrain$PctUsePubTrans <- Train$PctUsePubTrans
crimeTrain$ViolentCrimesPerPop <- Train$ViolentCrimesPerPop
crimeTrain$communityname <- NULL
crimeTrain$X <- NULL
#OtherPerCap
sum(is.na(crimeTrain$OtherPerCap))
str(crimeTrain$OtherPerCap)
hist(crimeTrain$OtherPerCap)
unique(crimeTrain$OtherPerCap)
crimeTrain$OtherPerCap[is.na(crimeTrain$OtherPerCap)] <- getmode(crimeTrain$OtherPerCap)
#Replacing one missing value with mode value


summary(crimeTrain$householdsize)
summary(crimeTrain$PersPerOccupHous)
#As these both variables mean the same and also have similarl value, householdsize is removed
crimeTrain$householdsize <- NULL


hist(crimeTrain$ViolentCrimesPerPop)
hist(crimeTrain$pctUrban)
?apply
skew <- apply(crimeTrain, 2, skewness)
print(skew[skew > 3])

#Let us look into these variables with high skewness and transform them
str(crimeTrain$population)
crimeTrain$population <- Train$population
crimeTrain$population <- crimeTrain$population + 0.01
symbox(crimeTrain$population, data = crimeTrain, powers=c(3,2,1,0,-0.5,-1,-2))
crimeTrain$population <- crimeTrain$population^(-0.5)

crimeTrain$numbUrban <- crimeTrain$numbUrban + 0.01
symbox(crimeTrain$numbUrban, data = crimeTrain, powers=c(3,2,1,0,-0.5,-1,-2))
crimeTrain$numbUrban <- log(crimeTrain$numbUrban)

crimeTrain$NumUnderPov <- crimeTrain$NumUnderPov + 0.01
symbox(crimeTrain$NumUnderPov, data = crimeTrain, powers=c(3,2,1,0,-0.5,-1,-2))
crimeTrain$NumUnderPov <- crimeTrain$NumUnderPov^(-0.5)

crimeTrain$NumIlleg <- crimeTrain$NumIlleg + 0.01
symbox(crimeTrain$NumIlleg, data = crimeTrain, powers=c(3,2,1,0,-0.5,-1,-2))
crimeTrain$NumIlleg <- log(crimeTrain$NumIlleg)

crimeTrain$NumImmig <- crimeTrain$NumImmig + 0.01
symbox(crimeTrain$NumImmig, data = crimeTrain, powers=c(3,2,1,0,-0.5,-1,-2))
crimeTrain$NumImmig <- crimeTrain$NumImmig^(-0.5)

crimeTrain$HousVacant <- crimeTrain$HousVacant + 0.01
symbox(crimeTrain$HousVacant, data = crimeTrain, powers=c(3,2,1,0,-0.5,-1,-2))
crimeTrain$HousVacant <- crimeTrain$HousVacant^(-0.5)

crimeTrain$NumInShelters <- crimeTrain$NumInShelters + 0.01
symbox(crimeTrain$NumInShelters, data = crimeTrain, powers=c(3,2,1,0,-0.5,-1,-2))
crimeTrain$NumInShelters <- crimeTrain$NumInShelters^(-1)

crimeTrain$state <- as.factor(crimeTrain$state)

ggplot(crimeTrain, aes(x = crimeTrain$medIncome, y = crimeTrain$ViolentCrimesPerPop)) + geom_point()
ggplot(crimeTrain, aes(x = crimeTrain$medFamInc, y = crimeTrain$ViolentCrimesPerPop)) + geom_point()
ggplot(crimeTrain, aes(x = crimeTrain$perCapInc, y = crimeTrain$ViolentCrimesPerPop)) + geom_point()
#From the above two plots we can remoce medIncome and medFamInc
crimeTrain$medIncome <- NULL
crimeTrain$medFamInc <- NULL
crimeTrain$numbUrban <- NULL
crimeTrain$NumUnderPov <- NULL

ggplot(crimeTrain, aes(x = crimeTrain$PctLess9thGrade, y = crimeTrain$ViolentCrimesPerPop)) + geom_point()
ggplot(crimeTrain, aes(x = crimeTrain$PctNotHSGrad, y = crimeTrain$ViolentCrimesPerPop)) + geom_point()
ggplot(crimeTrain, aes(x = crimeTrain$PctBSorMore, y = crimeTrain$ViolentCrimesPerPop)) + geom_point()
crimeTrain$PctLess9thGrade <- NULL

ggplot(crimeTrain, aes(x = crimeTrain$PctUnemployed, y = crimeTrain$ViolentCrimesPerPop)) + geom_point()
ggplot(crimeTrain, aes(x = crimeTrain$PctEmploy, y = crimeTrain$ViolentCrimesPerPop)) + geom_point()
cor(crimeTrain$PctNotHSGrad, crimeTrain$PctUnemployed)
#From the above correlation value and plots, Unemployed and PctNotHSGrad are correlated and similarly affecting target variable.
#So, we'll remove PctNotHSGrad to avoid overfitting.
crimeTrain$PctNotHSGrad <- NULL
cor(crimeTrain$PctEmploy, crimeTrain$PctUnemployed)

crimeTrain$PctEmplManu <- NULL
crimeTrain$PctEmplProfServ <- NULL

cor(crimeTrain$MalePctDivorce, crimeTrain$FemalePctDiv)
cor(crimeTrain$MalePctDivorce, crimeTrain$TotalPctDiv)
#From above two we can remove MalePctDivorce and FemalePctDiv
crimeTrain$MalePctDivorce <- NULL
crimeTrain$FemalePctDiv <- NULL
crimeTrain$NumIlleg <- NULL
crimeTrain$PctKids2Par <- NULL

cor(crimeTrain$PctYoungKids2Par,crimeTrain$PctTeen2Par)
cor(crimeTrain$PctYoungKids2Par,crimeTrain$ViolentCrimesPerPop)
cor(crimeTrain$PctTeen2Par,crimeTrain$ViolentCrimesPerPop)
crimeTrain$PctTeen2Par <- NULL
crimeTrain$PctWorkMomYoungKids <- NULL


cor(crimeTrain$PctRecImmig10, crimeTrain$PctRecentImmig)
cor(crimeTrain$PctImmigRecent, crimeTrain$PctImmigRec10)
cor(crimeTrain$PctRecentImmig, crimeTrain$ViolentCrimesPerPop)
cor(crimeTrain$PctImmigRec10, crimeTrain$ViolentCrimesPerPop)

crimeTrain$PctRecImmig5 <- NULL
crimeTrain$PctRecImmig8 <- NULL
crimeTrain$PctImmigRec5 <- NULL
crimeTrain$PctImmigRec8 <- NULL

cor(crimeTrain$PctSpeakEnglOnly,crimeTrain$PctNotSpeakEnglWell)
crimeTrain$PctLargHouseOccup <- NULL
crimeTrain$PersPerOccupHous <- NULL
crimeTrain$PersPerOwnOccHous <- NULL
crimeTrain$PersPerRentOccHous <- NULL
crimeTrain$MedYrHousBuilt <- NULL

ggplot(crimeTrain, aes(x = crimeTrain$MedOwnCostPctInc, y = crimeTrain$ViolentCrimesPerPop)) + geom_point()
ggplot(crimeTrain, aes(x = crimeTrain$MedOwnCostPctIncNoMtg, y = crimeTrain$ViolentCrimesPerPop)) + geom_point()
cor(crimeTrain$MedOwnCostPctInc, crimeTrain$MedOwnCostPctIncNoMtg)
cor(crimeTrain$MedOwnCostPctInc, crimeTrain$ViolentCrimesPerPop)
cor(crimeTrain$ViolentCrimesPerPop, crimeTrain$MedOwnCostPctIncNoMtg)

cor(crimeTrain$OwnOccMedVal, crimeTrain$OwnOccHiQuart)
cor(crimeTrain$OwnOccMedVal, crimeTrain$OwnOccLowQuart)
cor(crimeTrain$RentMedian, crimeTrain$RentLowQ)
cor(crimeTrain$RentMedian, crimeTrain$RentHighQ)
crimeTrain$OwnOccHiQuart <- NULL
crimeTrain$OwnOccLowQuart <- NULL
crimeTrain$RentLowQ <- NULL
crimeTrain$RentHighQ <- NULL
crimeTrain$MedRent <- NULL

cor(crimeTrain$RentMedian, crimeTrain$MedRent)

cor(crimeTrain$PctSameCity85, crimeTrain$PctSameHouse85)
crimeTrain$PctSameHouse85 <- NULL

par(mar = rep(0,4))
nums <- unlist(lapply(crimeTrain, is.numeric))
crime_corr <- crimeTrain[,nums]
corr_c <- cor(crime_corr)
corrplot(corr_c, method = "square", tl.cex = 0.6, tl.offset = 0.4,tl.srt = 90, cl.ratio = 0.3)
#The following observations can be made from the above correlation plot.
#1. age12t21 and age12t29 have correlation. This may be due to overlapping in data. So, we,ll make age12t29 to age21t29
#2. age65up and pctWSocSec are highly correlated and pctWSocSec is more related to ViolentCrimesPerPop.
#SO, we'll remove age65up to avoid overfitting.
#3. perCapInc and whitePerCap are highly correlated and seems to be similarly correlated with other variables. 
#So, wel
#4. PctBSorMore and PctOccupMgmtProf are highly correlated and PctOccupMgmtProf seems to be more related to other variables.
#So, we'll remove PctBSorMore. 
#5. PctFam2Par and PctYoungKids2Par are highly correlated. PctYoungKids2Par is removed to avoid multicollinearity.
#6. PctPersOwnOccup and PctHousOwnOcc are highly correlated and are similarly related to other variables.
# So, we'll remove PctPersOwnOccup
#7. PctRecentImmig and PctForeignBorn are highly correlated. PctForeignBorn is removed to avoid multicollinearity.
#8. OwnOccMedVal and RentMedian are highly correlated. OwnOccMedVal is removed to avoid multicollinearity.
#9. Also, other variables having correlation with ViolentCrimesPerPop are racepctblack, racepctwhite,pctWInvInc, pctWPubAsst,PctPopUnderPov,
# PctUnemployed,PctFam2Par, PersPerOwnOccHous, HousVacant.



crimeTrain$agePct12t21 <- NULL
cor(crimeTrain$perCapInc, crimeTrain$whitePerCap)
crimeTrain$agePct65up <- NULL
crimeTrain$PctBSorMore <- NULL
crimeTrain$PctYoungKids2Par <- NULL
crimeTrain$PctPersOwnOccup <- NULL
crimeTrain$PctForeignBorn <- NULL
crimeTrain$OwnOccMedVal <- NULL
crimeTrain$agePct16t24 <- NULL
#burito
crimeTrain$PctImmigRecent 
crimeTrain$PctVacMore6Mos
crimeTrain$pctWRetire     
crimeTrain$state


dev.off()
cor(crimeTrain$PctFam2Par, crimeTrain$PctYoungKids2Par)
cor(crimeTrain$PctFam2Par, crimeTrain$ViolentCrimesPerPop)
cor(crimeTrain$ViolentCrimesPerPop, crimeTrain$OwnOccMedVal)
cor(crimeTrain$RentMedian, crimeTrain$ViolentCrimesPerPop)
cor(crimeTrain$agePct12t21, crimeTrain$agePct16t24)

################################## PLS #################################################

crimeTrain1 <- crimeTrain[1:1200,]
crimeTest1 <- crimeTrain[1201:1850,]

set.seed(100)

train_index <- sample(1:nrow(crimeTrain1), 1000)
crimeTrain_train <- crimeTrain1[train_index,]
crimeTrain_test <- crimeTrain1[-train_index,]

train_control <- trainControl(method = "repeatedcv", number = 5, repeats = 5)
PLS_fit <- train(ViolentCrimesPerPop~., data = crimeTrain_train, method = "pls", tuneLength = 10)

summary(PLS_fit)

predict_pls <- predict(PLS_fit, crimeTrain_test)
plot(predict_pls)
postResample(pred = predict_pls,obs = crimeTrain_test$ViolentCrimesPerPop)

predict_pls1 <- predict(PLS_fit, crimeTest1)
PLS_submission <- cbind(cTest$Id, predict_pls1)
write.csv(PLS_submission, file = "PLS_submission.csv")

#############################################  LASS0 ######################################



lassoGrid <- expand.grid(fraction=seq(0.6,0.8,length=100))

Lasso_fit <- train(ViolentCrimesPerPop~., data = crimeTrain_train, method = "lasso", trControl = train_control, tuneGrid = lassoGrid)

predict_Lasso <- predict(Lasso_fit, crimeTrain_test)
plot(predict_Lasso)
postResample(pred = predict_Lasso,obs = crimeTrain_test$ViolentCrimesPerPop)

predict_Lasso1 <- predict(Lasso_fit, crimeTest1)
Lasso_submission <- cbind(cTest$Id, predict_Lasso1)
write.csv(Lasso_submission, file = "LASSO_submission.csv")


##################################### Elastic NET ############################################

enetGrid <- expand.grid(lambda=seq(0,0.001,length=100),fraction=seq(0.1,0.9,length=30))


Enet_fit <- train(ViolentCrimesPerPop~.,
             data=crimeTrain_train,
             method="enet",
             trControl=train_control,
             tuneGrid=enetGrid)


predict_Enet <- predict(Enet_fit, crimeTrain_test)
plot(predict_Enet)
postResample(pred = predict_Enet,obs = crimeTrain_test$ViolentCrimesPerPop)

predict_Enet1 <- predict(Enet_fit, crimeTest1)
Enet_submission <- cbind(cTest$Id, predict_Enet1)
write.csv(Enet_submission, file = "ENET_submission.csv")

################################################################lm AGAIN#######################################

lm_fit <- lm(ViolentCrimesPerPop~., data = crimeTrain_train)
coef(lm_fit)

rss_fit <- sum(lm_fit$resid^2)/lm_fit$df.residual

library(car)
vif(lm_fit)   #look at VIF scores

model.backward <- stepAIC(lm_fit, direction="both")
summary(model.backward)
nrss.backward <- sum(model.backward$resid^2)/model.backward$df.residual



predict_LM <- predict(lm_fit, crimeTrain_test)
plot(predict_LM)
postResample(pred = predict_LM,obs = crimeTrain_test$ViolentCrimesPerPop)

################################### SVM LINEAR #########################################################


?trainControl

train_control <- trainControl(method = "repeatedcv", number = 5, repeats = 5)  # 5 fold cross validation

grid2 <- expand.grid(C = seq(1,10,length=15))

SVM_fit1 <- train(ViolentCrimesPerPop~.,
                 data=crimeTrain_train,
                 method="svmLinear",        #linear Kernal
                 preProc = c("center","scale"),
                 trControl=train_control,
                 tuneGrid = grid2)

predict_SVM1 <- predict(SVM_fit1, crimeTrain_test)
plot(predict_SVM1)
postResample(pred = predict_SVM1,obs = crimeTrain_test$ViolentCrimesPerPop)

predict_SVM1 <- predict(SVM_fit1, crimeTest1)

postResample(pred = predict_SVM1,obs = crimeTrain1$ViolentCrimesPerPop)

SVM_submission1 <- cbind(cTest$Id, predict_SVM1)
write.csv(SVM_submission1, file = "SVM_submission1.csv")

predict_SVM2 <- predict(SVM_fit1, crimeTrain1)

postResample(pred = predict_SVM2,obs = crimeTrain1$ViolentCrimesPerPop)

################################### SVM RAdial #########################################################

grid <- expand.grid(sigma = seq(1.0,2.5,length=15),C = seq(3,9,length=15))

SVM_fit2 <- train(ViolentCrimesPerPop~.,
                  data=crimeTrain_train,
                  method="svmRadial",        #linear Kernal
                  preProc = c("center","scale"),
                  trControl=train_control,
                  tuneGrid = grid2)


predict_SVM2 <- predict(SVM_fit2, crimeTrain_test)
plot(predict_SVM1)
postResample(pred = predict_SVM2,obs = crimeTrain_test$ViolentCrimesPerPop)


################################ Elastic Net Again  ############################################33


enetGrid <- expand.grid(lambda=seq(0,0.001,length=100),fraction=seq(0.1,0.9,length=30))


Enet_fit1 <- train(ViolentCrimesPerPop~.,
                  data=crimeTrain_train,
                  method="enet",
                  trControl=train_control,
                  tuneGrid=enetGrid)


predict_Enet1 <- predict(Enet_fit1, crimeTrain_test)
plot(predict_Enet1)
postResample(pred = predict_Enet1,obs = crimeTrain_test$ViolentCrimesPerPop)

predict_Enet1 <- predict(Enet_fit1, crimeTest1)
Enet_submission1 <- cbind(cTest$Id, predict_Enet1)
write.csv(Enet_submission1, file = "ENET_submission1.csv")
